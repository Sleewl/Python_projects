import requests
import pandas as pd
import matplotlib.pyplot as plt
import getpass
from vkaudiotoken import get_kate_token
import time
from datetime import datetime

genre_map = {
    1: 'Rock',
    2: 'Pop',
    3: 'Rap & Hip-Hop',
    4: 'Easy Listening',
    5: 'House & Dance',
    6: 'Instrumental',
    7: 'Metal',
    8: 'Dubstep',
    10: 'Drum & Bass',
    11: 'Trance',
    12: 'Chanson',
    13: 'Ethnic',
    14: 'Acoustic & Vocal',
    15: 'Reggae',
    16: 'Classical',
    17: 'Indie Pop',
    18: 'Other',
    19: 'Speech',
    21: 'Alternative',
    22: 'Electropop & Disco',
    1001: 'Jazz & Blues'
}


def fetch_tracks(token, user_agent):
    url = "https://api.vk.com/method/audio.get"
    params = {
        "access_token": token,
        "v": "5.95",
        "count": 1000,
        "offset": 0
    }
    headers = {"User-Agent": user_agent}
    tracks = []
    while True:
        try:
            response = requests.get(url, params=params, headers=headers)
            response.raise_for_status()
            data = response.json()
            if 'response' not in data or 'items' not in data['response']:
                print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
                break
            items = data['response']['items']
            tracks.extend(items)
            print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ç—Ä–µ–∫–æ–≤, –≤—Å–µ–≥–æ: {len(tracks)}")
            if len(items) < 1000:
                break
            params['offset'] += 1000
            time.sleep(0.5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            break
    return tracks


def analyze_tracks(tracks):
    if not tracks:
        print("–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    df = pd.DataFrame(tracks)

    required_columns = ['artist', 'title', 'duration', 'genre_id', 'date']
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {missing_columns}")
        return

    df['genre_name'] = df['genre_id'].map(genre_map).fillna('Unknown')
    df['date'] = pd.to_datetime(df['date'], unit='s')

    total_tracks = len(df)
    total_duration = df['duration'].sum()
    avg_duration = df['duration'].mean()
    unique_artists = df['artist'].nunique()
    most_frequent_artist = df['artist'].mode()[0] if not df['artist'].empty else 'N/A'
    longest_track = df.loc[df['duration'].idxmax()] if not df.empty else None
    shortest_track = df.loc[df['duration'].idxmin()] if not df.empty else None

    print("\n –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    print(f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {total_tracks}")
    print(f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration // 3600} —á, {(total_duration % 3600) // 60} –º–∏–Ω")
    print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.2f} —Å–µ–∫")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {unique_artists}")
    print(f"–°–∞–º—ã–π —á–∞—Å—Ç—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {most_frequent_artist}")
    if longest_track is not None:
        print(
            f"–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ç—Ä–µ–∫: {longest_track['artist']} - {longest_track['title']} ({longest_track['duration']} —Å–µ–∫)")
    if shortest_track is not None:
        print(
            f"–°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç—Ä–µ–∫: {shortest_track['artist']} - {shortest_track['title']} ({shortest_track['duration']} —Å–µ–∫)")

    plt.style.use('seaborn')

    top_artists = df['artist'].value_counts().head(10)
    plt.figure(figsize=(10, 6))
    top_artists.plot(kind='bar')
    plt.title('–¢–æ–ø-10 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–µ–∫–æ–≤')
    plt.xlabel('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig('top_artists.png')
    plt.close()

    plt.figure(figsize=(10, 6))
    df['duration'].plot(kind='hist', bins=30, edgecolor='black')
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–æ–≤')
    plt.xlabel('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫—É–Ω–¥—ã)')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.tight_layout()
    plt.savefig('duration_distribution.png')
    plt.close()

    genre_counts = df['genre_name'].value_counts()
    plt.figure(figsize=(10, 8))
    genre_counts.plot(kind='pie', autopct='%1.1f%%', startangle=140)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤')
    plt.ylabel('')
    plt.tight_layout()
    plt.savefig('genre_distribution.png')
    plt.close()

    monthly_counts = df['date'].dt.to_period('M').value_counts().sort_index()
    plt.figure(figsize=(12, 6))
    monthly_counts.plot(kind='line', marker='o')
    plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º')
    plt.xlabel('–ú–µ—Å—è—Ü')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('tracks_over_time.png')
    plt.close()

    df.to_csv('vk_music_data.csv', index=False)
    print("\n –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'vk_music_data.csv'")
    print(" –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ PNG-—Ñ–∞–π–ª—ã")


def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –º—É–∑—ã–∫–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ")

    login = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email): ")
    password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: ")

    try:
        token, user_agent = get_kate_token(login, password)
        print(" –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return

    tracks = fetch_tracks(token, user_agent)

    analyze_tracks(tracks)


if __name__ == "__main__":
    main()